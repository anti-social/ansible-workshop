- name: Ensure app build directory
  file:
    path: "{{ app_build_dir }}"
    state: directory

- name: Copy sources
  synchronize:
    owner: no
    group: no
    src: app
    dest: "{{ app_build_dir }}"
    delete: yes
    rsync_opts:
    - "--filter=':- {{ playbook_dir }}/.gitignore'"

- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: "{{ 3600 * 24 }}"
  when: ansible_facts.distribution == 'Ubuntu'

- name: App image
  podman_image:
    name: app
    path: "{{ app_build_dir }}/app"
    force: yes
  register: app_image

- name: Webapp container
  containers.podman.podman_container:
    name: webapp
    image: app
    state: present
    recreate: "{{ app_image.changed }}"
    command: python -m app
    env:
      NAME: "{{ inventory_hostname }}"
    ports:
    - "127.0.0.1:{{ app_port }}:8080"
    healthcheck: curl -I localhost:8080
    healthcheck_start_period: 1s
    healthcheck_interval: 30s
    generate_systemd:
      path: /tmp/systemd
    # https://github.com/containers/ansible-podman-collections/issues/353
    # Or you can update podman module:
    # ansible-galaxy collection install containers.podman
    log_driver: journald
  register: webapp_container

- name: Configure webapp service
  blockinfile:
    path: /tmp/systemd/container-webapp.service
    insertafter: "\\[Unit\\]"
    marker: "# {mark} ANSIBLE MANAGED BLOCK of Unit"
    block: |
      StopWhenUnneeded=yes
  register: webapp_container_config

# We cannot update a systemd service because then
# it's not possible to restart the service
# due to process pid path is changed.
- name: Update webapp service
  when: webapp_container.changed or webapp_container_config.changed
  block:
  - service_facts:

  - name: Stop webapp service
    systemd:
      name: container-webapp
      state: stopped
    when: ansible_facts.services['container-webapp.service'] is defined
    # ingore_errors: yes

  - name: Update webapp service
    copy:
      remote_src: yes
      src: /tmp/systemd/container-webapp.service
      dest: /etc/systemd/system/container-webapp.service

  - name: Start webapp service
    systemd:
      name: container-webapp
      daemon_reload: yes

- name: Webapp proxy
  template:
    src: "container-webapp-proxy.{{ item }}.j2"
    dest: "/etc/systemd/system/container-webapp-proxy.{{ item }}"
  loop:
  - socket
  - service
  register: webapp_proxy_srv

- name: Reload systemd
  systemd:
    daemon_reload: yes
  when: webapp_proxy_srv.changed

- name: Restart webapp proxy
  systemd:
    name: "container-webapp-proxy.socket"
    enabled: yes
    state: restarted
  when: webapp_proxy_srv.results[0].changed

- name: Ngingx webapp site
  template:
    src: files/webapp-site.conf.j2
    dest: /etc/nginx/sites-available/webapp.example.com
    backup: yes
  vars:
    app_servers: "{{ groups['web'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) }}"
  notify: reload-nginx

- name: Enable webapp site
  file:
    src: /etc/nginx/sites-available/webapp.example.com
    path: /etc/nginx/sites-enabled/webapp.example.com
    state: link
  notify: reload-nginx
